 
Cursor Rules for SDN-ISM Project Directory
You are an expert in room acoustics modeling, sound propagation algorithms, and audio signal processing, with a focus on Python libraries and frameworks like NumPy, SciPy, Matplotlib, and PyRoomAcoustics.

Key Development Principles:
•    Write concise, technical accurate Python scripts for room acoustics and audio signal propagation
•    Prioritize clarity, modularity, and efficiency in the design
•    Use object-oriented programming for components (nodes, delay lines, etc.)
•    Implement scalable and efficient processing
•    Use descriptive variable and class names
•    Follow PEP 8 style guidelines

Primary Research Goal:

To investigate and understand why SDN, despite its perceptually good performance, exhibits a sudden drop in its Room Impulse Response (RIR) after first order reflections

Current Project Status and Implementation Strategy:
Phase 0: Without implementing the algoritmhs, phase - 0 store and prints the path lengths both in SDN and ISM, helps to visualise the SDN paths are longer than the ISM. But the path differences are not the cause of the drop as there is no path length pased attenuation applied in SDN algorithm.


1. Phase 1:
   - Traditional sample-based SDN algorithm is implemented, using deque as the main data structure.
   - SDN_timu.py and SDN-Base are the previous implementations which are being used as reference to compare for results and mathematical correctness. Currently RIRs seem to match except some amplitude differences where SDN-Ege (our implementation) has slightly higher amplitudes for some samples. These discrepancies should be found.

2. Next Phases:
   - To allow more energy injection into first receiving nodes as SDN uniformly distributes it more than the reality. IN reality first bounces are more specular than diffuse.
   - Adds path tracking capabilities to monitor signal flow: Attempting to map SDNs recursive bounces to equivalent ISM paths. Develop comparison methods with ISM paths
   - Analyze energy distribution, echo density, RTs, EDCs


The comparison between ISM and SDN requires careful consideration due to their fundamentally different approaches:

• ISM (Image Source Method):
  - Uses explicit, deterministic paths
  - Each reflection path is clearly defined
  - Reflection orders are tracked
  - Path lengths and reflection points are precisely calculated

• Traditional SDN (Scattering Delay Network):
  - Operates on a sample-by-sample basis
  - No explicit path tracking
  - Scattering occurs continuously based on the scattering matrix
  - Reflection orders are implicit in the signal propagation
  - Paths emerge from the network behavior, without being logged or stored.


Implementation:
1. Phase 1 - Traditional SDN Implementation:
   - delay lines for signal propagation are implemented via deque
   - scattering matrix for node interactions
   - gain attuations by using src-node and node-mic distances.

2. Phase 2 - Path Tracking Extension:
   - Monitor signal propagation through the network
   - Track energy flow between nodes
   - Reconstruct effective paths from observed propagation patterns
   - Develop metrics to compare SDN paths with ISM paths

3. Phase 3 - Comparison Framework:
   - Maintain separate but compatible implementations for SDN and ISM
   - Develop methods to analyze and compare path characteristics
   - Focus on understanding energy distribution differences
   - Investigate causes of the RIR drop in SDN

Below is a summary of SDN (scattering delay networks) method's algorithmic steps in LaTeX format. This is a simulator for calculating room impulse responses (RIR). IN SDN; first order reflections has exactly the same thoeretical path length which is same as the image source method (ISM) path lengths. HOwever, higher order reflections uses an approximation for this path length, to have a low-cost algorithm which does not calculate any actual path lengths above 1st order but only uses the distances between the specified nodes (scattering nodes). There is 1 scattering node at each wall, at the locations in which the first order reflection happens, according to the specified source and receiver (microphone) position.

In SDN,higher-order reflections will be automatically approximated by propagating signals iteratively through the delay network. No explicit distance calculations will be made for higher order reflections. Instead, the distance between nodes will be used to approximate the high number of bounces for higher order reflections.

Code structure:
Geometric classes are already defined. walls has labels, their plane coefficients. Image sources are found for a given wall and the source location. For propagating the impulse signal from the source to the microphoen and to the SDN network, deque from python collections will be used since it is a flexible sized tube like structure with pop-add-remove-append-popleft properties. 

Simplified algorithmic steps:

Room Geometry and Parameters, walls, nodes, delay lines are initialized

   - For each wall, there is one scattering node at the location of the first-order reflection, calculated by finding the intersection point of the line connecting the image source and the receiver, with the corresponding wall.

Signal Propagation:
   - Connect nodes via bidirectional delay lines:
     \[
     D_{k,m} = \left\lfloor \frac{F_s \|\mathbf{x}_k - \mathbf{x}_m\|}{c} \right\rfloor
     \]
   - no attenuation for propagation between nodes.

- Wall absorption coefficients (α) determine reflection coefficients sqrt(1-alpha)
- Scattering nodes are placed at first-order reflection points
- G = (F_s ||x_S - x_k||)/c is the path length in samples
- Delay lines are computed based on physical distances: D_{S,k} = ⌊G⌋
- Source signal is an impulse (1, 0, 0, ...)
- The pressure, \( p_{Sk}(n) \), due to the source as observed at the node is this:
     \[p_k(n) = p_{Sk}(n) + \frac{2}{N-1} \sum_{i=1}^{N-1} p_{ki}^+(n) 
     In order to simplify the calculation, input from the source will be distributed to incoming wave variables such that:
     \[\tilde{p}_{ki}^+(n) = p_{ki}^+(n) + 0.5 \, p_{Sk}(n)
     which provides the intended node pressure.
- Scattering matrix: S = (2/(N-1))1_{(N-1)×(N-1)} - I
     details of the scattering matrix usage are in the file how_scatteringmatrix.md

- Attenuation for spherical spreading, between source to nodes
      Source-to-node: g_{S,k} = G/||x_S - x_k||
- Node-to-mic: g_{k,M} = 1/(1 + ||x_k - x_M||/||x_S - x_k||)
- No attenuation for node-node connections


